#+title: TODO

* TODO Run the server from lisp

** TODO Monitor the process output and interface with it

** TODO Monitor resource usage of the process

There are three main ways of doing this:

- Using the OS's resource management
- Using JMX
- Using a mod/plugin

While the JMX approach is the one that will give us access to the most useful information, there doesn't seem to exist any way of using it outside of Java, so using it would mean having a small Java program that would report the usage to lisp or implementing it in c or in lisp as a library.

The mod/plugin approach is also plausible but maintaining one for each server/mod loader seems like a pain in the ass, also this won't be possible in vanilla Minecraft servers.

* TODO Enumerate commands using ~/help~

* TODO Provision and configure servers

Provide a streamlined way of provisioning and configuring servers

** TODO Parsing and modifying configuration

*** TODO Create a way to create config values, set defaults and querry config programatically

*** TODO Figure a way to model the config for instances

*** TODO How to specify the java and minecraft jar to use from the ones managed by the application

**** Java

When we want to define the instance in the config we have to take into account 3 cases for declaring java

- Providing a path to an external (non managed) java binary

This option makes the config not portable, because it relies both on that the same java distribution and version is installed in another machine and that it will be installed in the same path.

- Providing a java version

This option gives us the chance of managing java dependencies in a portable way. If none of the installed javas are of the specified version we can download one and automatically use it.

- Providing a java dist description

This option also allows us to manage java portably, because if no installed javas match the description we can just download it.

**** Minecraft

Our final goal is to be able to download and install minecraft server binnaries (modded and unmodded) directly from the internet, but for right now the simplest way fordward is letting the user provide the binnaries.

** TODO Downloading and managing java

** TODO Downloading and managing Minecraft

*** TODO Downloading and managing mods/modpacks

* TODO Logging

** TODO Parse and log Minecraft errors

** TODO Use query api to get server stats

* TODO Maybe add a web interface for management

* TODO A way to configure the server based on sexps
